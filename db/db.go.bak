package db

import (
    "database/sql"
    "fmt"
    _ "github.com/lib/pq"
    "lmgo/dawn_api/log"
	"go.uber.org/zap"
)

//dev pg库
const (
    host     = "dev.pg.data.meetwhale.com"
    port     = 3432
    user     = "postgres"
    password = "Buzhongyao123"
    dbname   = "cv"
)

// //正式环境prod pg库
// const (
//     host     = "dev.pg.data.meetwhale.com"
//     port     = 3432
//     user     = "postgres"
//     password = "Buzhongyao123"
//     dbname   = "cv"
// )

type Traj_Event struct {
    ImageUrl    string     `json:"image_url"`
    Timestamp   int64      `json:"timestamp"`
    LocX        int        `json:"loc_x"`
    LocY        int        `json:"loc_y"`
    Sn          string     `json:"sn"`
    Reid        string     `json:"reid"`
}

var TrajEventDataClient *sql.DB

func checkErr(err error) {
	if err != nil {
        log.Error("Error", zap.Any("error", err))
	}
}

func NewTrajDataClient() {
    psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
        "password=%s dbname=%s sslmode=disable",
        host, port, user, password, dbname)
    db, err := sql.Open("postgres", psqlInfo)
    checkErr(err)

    err = db.Ping()
    checkErr(err)
    TrajEventDataClient = db
}

func QueryTraj(sn_list []string, start_time int, end_time int) []Traj_Event{
    var sn_list_str string
    var traj_event []Traj_Event
    var reid string
    var image_url string 
    var timestamp int64
    var loc_x_cad int
    var loc_y_cad int
    var sn string
    if len(sn_list) > 0 {
        sn_list_str = "("
        for i, sn := range sn_list {
            sn_list_str += "'" + sn + "'"
            if i < (len(sn_list) - 1) {
                sn_list_str += ","
            }
        }
        sn_list_str += ")"
    }
    sqlStatement := fmt.Sprintf("SELECT reid, image_url, timestamp, sn, loc_x_cad, loc_y_cad FROM public.trajectory WHERE sn in %s and timestamp > %d and timestamp < %d ORDER BY timestamp DESC LIMIT 10", sn_list_str, start_time, end_time)
    rows, _ := TrajEventDataClient.Query(sqlStatement)
    defer rows.Close()
    for rows.Next(){
        rows.Scan(&reid, &image_url, &timestamp, &sn, &loc_x_cad, &loc_y_cad)
        event := Traj_Event{ImageUrl: image_url, Timestamp:timestamp, LocX:loc_x_cad, LocY:loc_y_cad, Sn:sn, Reid:reid}
        traj_event = append(traj_event, event)
    }
    return traj_event
} 

func CloseConnect(){
	TrajEventDataClient.Close()
}
